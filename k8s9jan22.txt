
                              ON Master 
 1. kubeadm init

 https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker
https://docs.docker.com/engine/install/ubuntu/

1.create ubuntu 16 server with t2 medium
2. install.docker
sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update
udo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
3.curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
4.sudo apt-get update
5.sudo apt-get install docker-ce docker-ce-cli containerd.io
6. 
sudo mkdir /etc/docker
7. cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

8.sudo systemctl enable docker
sudo systemctl daemon-reload
sudo systemctl restart docker
after restart

sudo systemctl enable docker
sudo systemctl daemon-reload

9.Installing kubeadm, kubelet and kubectl 
10.sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
11.sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
12.echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
13.sudo apt-get update


after initilized kubernetes
---------------------------
Your Kubernetes control-plane has initialized successfully!
------------ ON Master...

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.28.128:6443 --token fj652u.v22zbhpgfj8s7cgx \
        --discovery-token-ca-cert-hash sha256:6e066abff213e9541fd046cfd54ba23ec38d855c98f5575b25bf63d4b42b80f6
root@ip-172-31-28-128:~# mkdir -p $HOME/.kube
root@ip-172-31-28-128:~# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
root@ip-172-31-28-128:~# sudo chown $(id -u):$(id -g) $HOME/.kube/config
root@ip-172-31-28-128:~# kubectl get nodes
NAME               STATUS     ROLES                  AGE   VERSION
ip-172-31-28-128   NotReady   control-plane,master   13m   v1.23.1
root@ip-172-31-28-128:~#

On nodes
kubeadm join 172.31.28.128:6443 --token fj652u.v22zbhpgfj8s7cgx \
        --discovery-token-ca-cert-hash sha256:6e066abff213e9541fd046cfd54ba23ec38d855c98f5575b25bf63d4b42b80f6

